#!/usr/bin/python

from __future__ import print_function
import argparse
import logging
import sys

import numpy as np

from automata.render import AnimatedGif
import automata.life
import automata.diffusion

def main():
    logging.basicConfig(level=logging.ERROR)
    parser = argparse.ArgumentParser(description="Simulate some things")
    parser.add_argument("--verbose", action="store_true", help="Print lots of messages")
    parser.add_argument("--steps", type=int, default=100, help="Number of steps to model (default: %(default)s)")
    parser.add_argument("--gif", default="model.gif", help="Image file name (default: %(default)s)")
    parser.add_argument("--log", default="model.log", help="Log file name (default: %(default)s)")
    parser.add_argument("--scenario", default="life", choices=["life", "diffusion"], help="Scenario to run (default: %(default)s)")

    # Print larger np arrays: https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html
    np.set_printoptions(threshold=5000, linewidth=100)

    args = parser.parse_args()

    try:
        scenarioClass = dict(life=automata.life.Life, diffusion=automata.diffusion.Diffusion)[args.scenario]
    except ValueError:
        print("No scenario: {}".format(args.scenario))
        return False

    print("Initializing {}".format(scenarioClass))
    scenario = scenarioClass()
    gif = AnimatedGif()
    gif.append(scenario.universe())

    with open(args.log, "w") as logfile:
        logfile.write("Starting universe\n")
        np.set_printoptions(threshold=50000, linewidth=1000)
        logfile.write("{}\n".format(scenario.universe()))
        np.set_printoptions()

    print("Simulating {} steps".format(args.steps))
    for step in range(args.steps):
        gif.append(scenario.step())
        print(".", end="")
        sys.stdout.flush()
    print("")

    print("Exporting to {}".format(args.gif))
    gif.render(args.gif)

    with open(args.log, "a") as logfile:
        logfile.write("Finishing universe\n")
        np.set_printoptions(threshold=50000, linewidth=1000)
        logfile.write("{}\n".format(scenario.universe()))
        np.set_printoptions()

if __name__ == "__main__":
    main()
